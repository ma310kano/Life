@page "/recipes/{RecipeId}"

@using Life.Application
@using Life.Application.Data

@inject IRecipeQueryService RecipeQueryService

@if (_recipe is not null)
{
	<h1>@(_recipe.Item.ItemName)のレシピ</h1>

	<h2>アイテム</h2>
	<table class="table">
		<tbody>
			<tr>
				<th>アイテムID</th>
				<td>@_recipe.Item.ItemId</td>
			</tr>
			<tr>
				<th>アイテム名</th>
				<td><a href="/items/@_recipe.Item.ItemId">@_recipe.Item.ItemName</a></td>
			</tr>
		</tbody>
	</table>

	<h2>材料</h2>
	<table class="table">
		<thead>
			<tr>
				<th>アイテムID</th>
				<th>アイテム名</th>
				<th>数量</th>
			</tr>
		</thead>
		<tbody>
			@foreach (RecipeIngredientData ingredient in _recipe.Ingredients)
			{
				<tr>
					<td class="item-id">@ingredient.Item.ItemId</td>
					<td><a href="/items/@ingredient.Item.ItemId">@ingredient.Item.ItemName</a></td>
					<td>@ingredient.Quantity</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	#region Fields

	/// <summary>
	/// レシピ
	/// </summary>
	private RecipeData? _recipe;

	#endregion

	#region Properties

	/// <summary>
	/// レシピIDを設定または取得します。
	/// </summary>
	[Parameter]
	public string RecipeId { get; set; } = string.Empty;

	#endregion

	#region Methods

	/// <summary>
	/// 初期化された際に呼び出されます。
	/// </summary>
	/// <returns>非同期操作を返します。</returns>
	protected override async Task OnInitializedAsync()
	{
		_recipe = await RecipeQueryService.QuerySingleAsync(RecipeId);
	}

	#endregion
}
