@page "/humans/{HumanId}/gather"

@using Life.Application
@using Life.Application.Command
@using Life.Application.Data

@inject NavigationManager NavigationManager
@inject IHumanQueryService HumanQueryService
@inject IAreaQueryService AreaQueryService
@inject IHumanGatheringService HumanGatheringService

@if (_human is not null)
{
	<nav aria-label="breadcrumb">
		<ol class="breadcrumb">
			<li class="breadcrumb-item"><a href="/">ホーム</a></li>
			<li class="breadcrumb-item"><a href="/humans">人間</a></li>
			<li class="breadcrumb-item"><a href="/humans/@_human.HumanId">@_human.FirstName @_human.Family.FamilyName</a></li>
			<li class="breadcrumb-item active" aria-current="page">@(_human.Area.AreaName)で採集</li>
		</ol>
	</nav>

	<h1>@(_human.Area.AreaName)で採集</h1>
}

@if (_human is not null && _containers is not null && _model is not null)
{
	<EditForm Model="_model" OnValidSubmit="SubmitAsync">
		@foreach (ItemModel item in _model.Items)
		{
			<div class="form-check">
				<InputCheckbox class="form-check-input" id="@item.ItemId" disabled="@(item.IsValid ? null : "disabled")" @bind-Value="item.IsSubject" />
				<label class="form-check-label" for="@item.ItemId">@item.ItemName</label>
			</div>
			<InputNumber class="form-control" disabled="@(!item.IsSubject)" min="1" @bind-Value="item.Quantity" />
		}

		@foreach (FluidItemModel item in _model.FluidItems)
		{
			<div class="form-check">
				<InputCheckbox class="form-check-input" id="@item.ItemId" disabled="@(item.IsValid ? null : "disabled")" @bind-Value="item.IsSubject" />
				<label class="form-check-label" for="@item.ItemId">@item.ItemName</label>
			</div>
			<InputSelect class="form-select" disabled="@(!item.IsSubject)" @bind-Value="item.StorageItemMatterId">
				@foreach (ContainerItemMatterData itemMatter in _containers)
				{
					<option value="@itemMatter.ItemMatterId">@itemMatter.ItemName</option>
				}
			</InputSelect>
		}

		<div class="mt-3">
			<button type="submit" class="btn btn-primary">採集</button>
		</div>
	</EditForm>
}

@code {
	#region Fields

	/// <summary>
	/// 人間
	/// </summary>
	private HumanData? _human;

	/// <summary>
	/// コンテナーのコレクション
	/// </summary>
	private IReadOnlyCollection<ContainerItemMatterData>? _containers;

	/// <summary>
	/// モデル
	/// </summary>
	private GatheringModel? _model;

	#endregion

	#region Properties

	/// <summary>
	/// 人間IDを設定または取得します。
	/// </summary>
	[Parameter]
	public string HumanId { get; set; } = string.Empty;

	#endregion

	#region Methods

	/// <summary>
	/// 初期化された際に呼び出されます。
	/// </summary>
	/// <returns>非同期操作を返します。</returns>
	protected override async Task OnInitializedAsync()
	{
		_human = await HumanQueryService.QuerySingleAsync(HumanId);

		{
			List<ContainerItemMatterData> containers = [];

			foreach (IItemMatterData itemMatter in _human.InventorySlots)
			{
				ContainerItemMatterData? container = itemMatter as ContainerItemMatterData;
				if (container is null) continue;

				containers.Add(container);
			}

			_containers = containers;
		}

		{
			AreaData area = await AreaQueryService.QuerySingleAsync(_human.Area.AreaId);

			List<ItemModel> itemModels = [];
			foreach (AreaItemData source in area.Items.Where(x => !x.IsFluid))
			{
				ItemModel itemModel;
				{
					bool isValid;
					if (!source.EquipmentItemIds.Any())
					{
						isValid = true;
					}
					else
					{
						isValid = source.EquipmentItemIds.Any(equipmentItemId => _human.EquipmentItems.Any(y => y.ItemId == equipmentItemId));
					}

					itemModel = new ItemModel(source.ItemId, source.ItemName, isValid);
				}

				itemModels.Add(itemModel);
			}

			List<FluidItemModel> fluidItemModels = [];
			{
				bool isValid = _containers.Any();
				foreach (AreaItemData source in area.Items.Where(x => x.IsFluid))
				{
					FluidItemModel fluidItemModel = new FluidItemModel(source.ItemId, source.ItemName, isValid);

					fluidItemModels.Add(fluidItemModel);
				}
			}

			_model = new GatheringModel(HumanId, itemModels, fluidItemModels);
		}
	}

	/// <summary>
	/// 送信します。
	/// </summary>
	/// <returns>非同期操作を返します。</returns>
	private async Task SubmitAsync()
	{
		{
			HumanGatheringCommand command = _model!.CreateCommand();

			await HumanGatheringService.GatherAsync(command);
		}

		NavigationManager.NavigateTo($"/humans/{HumanId}");
	}

	#endregion

	#region Nested types

	/// <summary>
	/// 採集モデル
	/// </summary>
	/// <param name="humanId">人間ID</param>
	/// <param name="items">アイテムのコレクション</param>
	private class GatheringModel(string humanId, IReadOnlyCollection<ItemModel> items, IReadOnlyCollection<FluidItemModel> fluidItems)
	{
		#region Properties

		/// <summary>
		/// 人間IDを取得します。
		/// </summary>
		public string HumanId { get; } = humanId;

		/// <summary>
		/// アイテムのコレクションを取得します。
		/// </summary>
		public IReadOnlyCollection<ItemModel> Items { get; } = items;

		/// <summary>
		/// 流体アイテムのコレクションを取得します。
		/// </summary>
		public IReadOnlyCollection<FluidItemModel> FluidItems { get; } = fluidItems;

		#endregion

		#region Methods

		/// <summary>
		/// コマンドを作成します。
		/// </summary>
		/// <returns>作成したコマンドを返します。</returns>
		public HumanGatheringCommand CreateCommand()
		{
			HumanGatheringCommand command;
			{
				List<HumanGatheringItemCommand> items = Items.Where(x => x.IsSubject).Select(x => new HumanGatheringItemCommand(x.ItemId, x.Quantity)).ToList();
				List<HumanGatheringFluidItemCommand> fluidItems = FluidItems.Where(x => x.IsSubject).Select(x => new HumanGatheringFluidItemCommand(x.ItemId, x.StorageItemMatterId)).ToList();

				command = new HumanGatheringCommand(HumanId, items, fluidItems);
			}

			return command;
		}

		#endregion
	}

	/// <summary>
	/// アイテムモデル
	/// </summary>
	/// <param name="itemId">アイテムID</param>
	/// <param name="itemName">アイテム名</param>
	/// <param name="isValid">有効かどうか</param>
	private class ItemModel(string itemId, string itemName, bool isValid)
	{
		#region Properties

		/// <summary>
		/// アイテムIDを取得します。
		/// </summary>
		public string ItemId { get; } = itemId;

		/// <summary>
		/// アイテム名を取得します。
		/// </summary>
		public string ItemName { get; } = itemName;

		/// <summary>
		/// 有効かどうかを取得します。
		/// </summary>
		public bool IsValid { get; } = isValid;

		/// <summary>
		/// 数量を設定または取得します。
		/// </summary>
		public int Quantity { get; set; } = 1;

		/// <summary>
		/// 対象かどうかを設定または取得します。
		/// </summary>
		public bool IsSubject { get; set; }

		#endregion
	}

	/// <summary>
	/// 流体アイテムモデル
	/// </summary>
	/// <param name="itemId">アイテムID</param>
	/// <param name="itemName">アイテム名</param>
	/// <param name="isValid">有効かどうか</param>
	private class FluidItemModel(string itemId, string itemName, bool isValid)
	{
		#region Properties

		/// <summary>
		/// アイテムIDを取得します。
		/// </summary>
		public string ItemId { get; } = itemId;

		/// <summary>
		/// アイテム名を取得します。
		/// </summary>
		public string ItemName { get; } = itemName;

		/// <summary>
		/// 有効かどうかを取得します。
		/// </summary>
		public bool IsValid { get; } = isValid;

		/// <summary>
		/// 収納アイテム物質IDを取得します。
		/// </summary>
		public string StorageItemMatterId { get; set; } = string.Empty;

		/// <summary>
		/// 対象かどうかを設定または取得します。
		/// </summary>
		public bool IsSubject { get; set; }

		#endregion
	}

	#endregion
}
