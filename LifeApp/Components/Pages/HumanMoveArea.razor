@page "/humans/{HumanId}/move-area"

@using Life.Application
@using Life.Application.Command
@using Life.Application.Data

@inject NavigationManager NavigationManager
@inject IHumanQueryService HumanQueryService
@inject IAreaSummaryQueryService AreaSummaryQueryService
@inject IHumanAreaMovementService HumanAreaMovementService

@if (_human is not null && _model is not null && _areas is not null)
{
	<nav aria-label="breadcrumb">
		<ol class="breadcrumb">
			<li class="breadcrumb-item"><a href="/">ホーム</a></li>
			<li class="breadcrumb-item"><a href="/humans">人間</a></li>
			<li class="breadcrumb-item"><a href="/humans/@_human.HumanId">@_human.FirstName @_human.Family.FamilyName</a></li>
			<li class="breadcrumb-item active" aria-current="page">エリアを移動</li>
		</ol>
	</nav>

	<h1>エリアを移動</h1>

	<EditForm Model="_model" OnValidSubmit="SubmitAsync">
		<div class="mb-3">
			<label class="form-label" for="source">移動元</label>
			<p id="source">@_human.Area.AreaName</p>
		</div>
		<div class="mb-3">
			<label class="form-label" for="destination">移動先</label>
			<InputSelect class="form-control" id="destination" @bind-Value="_model.AreaId">
				@foreach (AreaSummaryData area in _areas)
				{
					<option value="@area.AreaId">@area.AreaName</option>
				}
			</InputSelect>
		</div>
		<div class="right">
			<button type="submit" class="btn btn-primary">変更</button>
		</div>
	</EditForm>
}

@code {
	#region Fields

	/// <summary>
	/// 人間
	/// </summary>
	private HumanData? _human;

	/// <summary>
	/// モデル
	/// </summary>
	private Model? _model;

	/// <summary>
	/// エリアのコレクション
	/// </summary>
	private IEnumerable<AreaSummaryData>? _areas;

	#endregion

	#region Properties

	/// <summary>
	/// 人間IDを設定または取得します。
	/// </summary>
	[Parameter]
	public string HumanId { get; set; } = string.Empty;

	#endregion

	#region Methods

	/// <summary>
	/// 初期化された際に呼び出されます。
	/// </summary>
	/// <returns>非同期操作を返します。</returns>
	protected override async Task OnInitializedAsync()
	{
		_human = await HumanQueryService.QuerySingleAsync(HumanId);

		// 移動元のエリアは除外する
		_areas = (await AreaSummaryQueryService.QueryAsync()).Where(x => x.AreaId != _human.Area.AreaId);

		string initialAreaId = _areas.FirstOrDefault()?.AreaId ?? string.Empty;
		_model = new Model(initialAreaId);
	}

	/// <summary>
	/// 送信します。
	/// </summary>
	/// <returns>非同期操作を返します。</returns>
	private async Task SubmitAsync()
	{
		HumanAreaMovementCommand command = new(_human!.HumanId, _model!.AreaId);

		await HumanAreaMovementService.MoveAreaAsync(command);

		NavigationManager.NavigateTo($"/humans/{_human.HumanId}");
	}

	#endregion

	#region Nested types

	/// <summary>
	/// モデル
	/// </summary>
	/// <param name="areaId">エリアID</param>
	private class Model(string areaId)
	{
		#region Properties

		/// <summary>
		/// エリアIDを設定または取得します。
		/// </summary>
		public string AreaId { get; set; } = areaId;

		#endregion
	}

	#endregion
}
