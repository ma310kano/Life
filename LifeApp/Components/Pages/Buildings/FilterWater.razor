@using Life.Application
@using Life.Application.Command
@using Life.Application.Data

@inject NavigationManager NavigationManager
@inject IHumanQueryService HumanQueryService
@inject IBuildingQueryService BuildingQueryService
@inject IWaterFilteringService WaterFilteringService

@if (_human is not null && _containers is not null && _building is not null && _model is not null)
{
	<nav aria-label="breadcrumb">
		<ol class="breadcrumb">
			<li class="breadcrumb-item"><a href="/">ホーム</a></li>
			<li class="breadcrumb-item"><a href="/humans">人間</a></li>
			<li class="breadcrumb-item"><a href="/humans/@_human.HumanId">@_human.FirstName @_human.Family.FamilyName</a></li>
			<li class="breadcrumb-item active" aria-current="page">@_building.BuildingName</li>
		</ol>
	</nav>

	<h1>@_building.BuildingName</h1>

	<EditForm Model="_model" OnValidSubmit="SubmitAsync">
		<div class="mb-3">
			<label for="source-container-item-matter-id">濾過元の容器</label>
			<InputSelect class="form-select" @bind-Value="_model.SourceContainerItemMatterId">
				@foreach (ContainerItemMatterData container in _containers)
				{
					<option value="@container.ItemMatterId">@container.ItemName</option>
				}
			</InputSelect>
		</div>
		<div class="mb-3">
			<label for="destination-container-item-matter-id">濾過先の容器</label>
			<InputSelect class="form-select" @bind-Value="_model.DestinationContainerItemMatterId">
				@foreach (ContainerItemMatterData container in _containers)
				{
					<option value="@container.ItemMatterId">@container.ItemName</option>
				}
			</InputSelect>
		</div>
		<div class="mb-3">
			<button type="submit" class="btn btn-primary">濾過</button>
		</div>
	</EditForm>
}

@code {
	#region Fields

	/// <summary>
	/// 人間
	/// </summary>
	private HumanData? _human;

	/// <summary>
	/// コンテナーのコレクション
	/// </summary>
	private IReadOnlyCollection<ContainerItemMatterData>? _containers;

	/// <summary>
	/// 建造物
	/// </summary>
	private BuildingData? _building;

	/// <summary>
	/// モデル
	/// </summary>
	private Model? _model;

	#endregion

	#region Properties

	/// <summary>
	/// 人間IDを設定または取得します。
	/// </summary>
	[Parameter]
	public string HumanId { get; set; } = string.Empty;

	#endregion

	#region Methods

	/// <summary>
	/// 初期化された際に呼び出されます。
	/// </summary>
	/// <returns>非同期操作を返します。</returns>
	protected override async Task OnInitializedAsync()
	{
		_human = await HumanQueryService.QuerySingleAsync(HumanId);

		{
			List<ContainerItemMatterData> containers = [];

			foreach (IItemMatterData itemMatter in _human.InventorySlots)
			{
				ContainerItemMatterData? container = itemMatter as ContainerItemMatterData;
				if (container is null) continue;

				containers.Add(container);
			}

			_containers = containers;
		}

		_building = await BuildingQueryService.QuerySingleAsync("filter");

		_model = new Model(_human.HumanId);
	}

	/// <summary>
	/// 送信します。
	/// </summary>
	/// <returns>非同期操作を返します。</returns>
	private async Task SubmitAsync()
	{
		HumanWaterFilteringCommand command = _model!.CreateCommand();

		await WaterFilteringService.FilterAsync(command);

		NavigationManager.NavigateTo($"/humans/{_human!.HumanId}");
	}

	#endregion

	#region Nested types

	/// <summary>
	/// モデル
	/// </summary>
	/// <param name="humanId">人間ID</param>
	private class Model(string humanId)
	{
		#region Fields

		/// <summary>
		/// 人間ID
		/// </summary>
		private readonly string _humanId = humanId;

		#endregion

		#region Properties

		/// <summary>
		/// 濾過元のコンテナーアイテム物質IDを設定または取得します。
		/// </summary>
		public string SourceContainerItemMatterId { get; set; } = string.Empty;

		/// <summary>
		/// 濾過先のコンテナーアイテム物質IDを設定または取得します。
		/// </summary>
		public string DestinationContainerItemMatterId { get; set; } = string.Empty;

		#endregion

		#region Methods

		/// <summary>
		/// コマンドを作成します。
		/// </summary>
		/// <returns>作成したコマンドを返します。</returns>
		public HumanWaterFilteringCommand CreateCommand()
		{
			HumanWaterFilteringCommand command = new(_humanId, SourceContainerItemMatterId, DestinationContainerItemMatterId);

			return command;
		}

		#endregion
	}

	#endregion
}
