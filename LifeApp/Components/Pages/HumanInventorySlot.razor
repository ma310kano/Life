@page "/humans/{HumanId}/inventory-slots/{ItemMatterId}"

@using Life.Application
@using Life.Application.Command
@using Life.Application.Data

@inject NavigationManager NavigationManager
@inject IHumanQueryService HumanQueryService
@inject IHumanEquipmentService HumanEquipmentService

@if (_human is not null && _inventorySlot is not null)
{
	<nav aria-label="breadcrumb">
		<ol class="breadcrumb">
			<li class="breadcrumb-item"><a href="/">ホーム</a></li>
			<li class="breadcrumb-item"><a href="/humans">人間</a></li>
			<li class="breadcrumb-item"><a href="/humans/@_human.HumanId">@_human.FirstName @_human.Family.FamilyName</a></li>
			<li class="breadcrumb-item">インベントリー</li>
			<li class="breadcrumb-item active" aria-current="page">@_inventorySlot.ItemName</li>
		</ol>
	</nav>

	<h1>@_inventorySlot.ItemName</h1>
	<table class="table">
		<tbody>
			<tr>
				<th>アイテム</th>
				<td>@_inventorySlot.ItemName</td>
			</tr>
			@{
				StackItemMatterData? stack = _inventorySlot as StackItemMatterData;
				if (stack is not null)
				{
					<tr>
						<th>数量</th>
						<td>@stack.Quantity.ToString("#,0")</td>
					</tr>
				}
			}
		</tbody>
	</table>

	ContainerItemMatterData? container = _inventorySlot as ContainerItemMatterData;
	if (container is not null)
	{
		<table class="table">
			<thead>
				<tr>
					<th>アイテム名</th>
					<th>数量</th>
				</tr>
			</thead>
			<tbody>
				@foreach (IItemMatterData content in container.Contents)
				{
					<tr>
						<td>@content.ItemName</td>
						<td>@((content as StackItemMatterData)?.Quantity)</td>
					</tr>
				}
			</tbody>
		</table>
	}

	<button type="button" class="btn btn-secondary" disabled="@(!_inventorySlot.CanEquip ? "disabled" : null)" @onclick="EquipAsync">装備</button>
}

@code {
	#region Fields

	/// <summary>
	/// 人間
	/// </summary>
	private HumanData? _human;

	/// <summary>
	/// インベントリースロット
	/// </summary>
	private IItemMatterData? _inventorySlot;

	#endregion

	#region Properties

	/// <summary>
	/// 人間IDを設定または取得します。
	/// </summary>
	[Parameter]
	public string HumanId { get; set; } = string.Empty;

	/// <summary>
	/// アイテム物質IDを設定または取得します。
	/// </summary>
	[Parameter]
	public string ItemMatterId { get; set; } = string.Empty;

	#endregion

	#region Methods

	/// <summary>
	/// 初期化された際に呼び出されます。
	/// </summary>
	/// <returns>非同期操作を返します。</returns>
	protected override async Task OnInitializedAsync()
	{
		_human = await HumanQueryService.QuerySingleAsync(HumanId);
		_inventorySlot = _human.InventorySlots.Single(x => x.ItemMatterId == ItemMatterId);
	}

	/// <summary>
	/// 装備します。
	/// </summary>
	/// <returns>非同期操作を返します。</returns>
	private async Task EquipAsync()
	{
		HumanEquipmentCommand command = new(_human!.HumanId, _inventorySlot!.ItemMatterId);

		await HumanEquipmentService.EquipAsync(command);

		NavigationManager.NavigateTo($"humans/{_human.HumanId}");
	}

	#endregion
}
